# This file is based on the PALISADE Makefile
# Multi OS makefile (No Windows yet)

UNAME_S := $(shell uname -s)
HOST_SYSTEM = $(shell uname | cut -f 1 -d_)
SYSTEM ?= $(HOST_SYSTEM)

# CPPSTD := -std=c++17 -fPIC
CPPSTD := -std=c++17 -fPIC 

ifeq ($(SYSTEM),Darwin)
CC := /usr/local/opt/llvm/bin/clang++ $(CPPSTD)
LDFLAGS += -L/usr/local/opt/llvm/lib -Wl,-rpath,/usr/local/opt/llvm/lib, -L/usr/local/lib
CPPFLAGS += -I/usr/local/opt/llvm/include -I/usr/local/opt/llvm/include/c++/v1/
LIBSUFFIX := .dylib
LIBCMD := -dynamiclib -undefined suppress -flat_namespace
else
# CC := g++ $(CPPSTD) -fpermissive
# CC := ccache clang++ $(CPPSTD) -Wloop-analysis
CC := clang++ $(CPPSTD) -Wloop-analysis
# CC := clang++ $(CPPSTD) -Wloop-analysis
# CC += -g   ## for debugging
# Suppress warnings from alignment of STL structs of blocks
CPPFLAGS += -Wno-ignored-attributes 
LIBSUFFIX := .so
LIBCMD := -fPIC -shared -Wl,--export-dynamic,-z,defs
endif

RDYNAMIC := -rdynamic

COMPTHREADFLAG := -pthread -fopenmp -fopenmp-simd
LOADTHREADFLAG := -pthread -fopenmp -fopenmp-simd

LDFLAGS += -lboost_system -lboost_thread -lmpfr -lgmpxx -lgmp -lcryptoTools
LDFLAGS += -lbenchmark

LDFLAGS += -lrt

#main best performance configuration for parallel operation - cross-platform
CPPFLAGS += -O3
CPPFLAGS += -maes -msse4 -Wall -fno-omit-frame-pointer $(COMPTHREADFLAG) ##undefine for parallel best performance operation

TEST_LIB := $(LOADTHREADFLAG)

#build and bin directory
BUILDDIR := build
BINDIR := bin

#cryptoTools locations
MIRACL_LIBDIR := third_party/cryptoTools/thirdparty/linux/miracl/miracl/source
MIRACL_INCDIR := third_party/cryptoTools/thirdparty/linux/miracl
LIBCMD += -L$(MIRACL_LIBDIR)

CT_LIBDIR := third_party/cryptoTools/lib
CT_INCDIR := third_party/cryptoTools
LIBCMD += -L$(CT_LIBDIR)

#LDFLAGS += -lmiracl -lcryptoTools

LIBCMD += -L/usr/lib/x86_64-linux-gnu
LIBCMD += -L/usr/local/lib

#sources folders
EXTLIBDIR := bin/lib
EXTTESTDIR := bin/unittest
EXTDEMODIR := bin/demo

# extentions for source and header files
SRCEXT := cpp
HDREXT := h

$(objects) : %.o : %.cpp

# External libraries
#EXTLIB := -L$(EXTLIBDIR) $(TEST_LIB) -pg ## include profiling
EXTLIB := -L$(EXTLIBDIR) $(TEST_LIB) ## no-profiling

INC := -I src/lib -I test -I $(CT_INCDIR) -I $(MIRACL_INCDIR) # -I $(NFL_INCDIR)
# INC := -I src/lib -I test -I $(CT_INCDIR) -I $(MIRACL_INCDIR)
# INC += -I $(BOODT_INCDIR)

#the name of the shared object library
CORELIB := libgazelle$(LIBSUFFIX)

# run make for all components. you can run any individual component separately
#  by invoking   "make alltargets"  for example
# each corresponding makefile will make the allxxxx target
all: allcore
	$(RM) -rf bin/serialized/
	mkdir bin/serialized/

alldemos: allcoredemos

testall: testcore

# clean up all components. you can clean any individual compoenent separately
#  by invoking   "make cleantargets"  for example
# each corresponding makefile will make the cleanxxxx target
.PHONEY: clean
clean: cleancore
	@echo 'Cleaning top level autogenerated directories'
	$(RM) -f test/include/gtest/gtest-all.o
	$(RM) -rf bin

include Makefile.src

test/include/gtest/gtest-all.o: test/include/gtest/gtest-all.cc
	$(CC) -c $(CPPFLAGS) -o $@ $<
