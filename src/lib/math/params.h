/*
 * params.h
 *
 * Defines primes and associated parameters for fast modular reduction
 *
 * Created on: Feb 27, 2019
 *      Author: Leo de Castro
 */


#ifndef LBCRYPT_MATH_PARAMS_H
#define LBCRYPT_MATH_PARAMS_H

#include "utils/backend.h"

using namespace std;

namespace lbcrypto {

    //
    // Integer encoding params
    //

    struct fast_two_limb_reduction_params {

        typedef ui64 value_type;
        typedef si64 signed_value_type;
        typedef ui128 greater_value_type;

        static constexpr ui32 kMaxNbModuli = 2;
        static constexpr ui32 kModulusRepresentationBitsize = 64;

        static constexpr inline ui32 getModulusBitSize(ui32 modInd=0) { 
            return 60*(1-modInd) + (modInd)*59;
        };

        static constexpr inline ui32 getS0(ui32 modInd=0) {
            return kModulusRepresentationBitsize - getModulusBitSize(modInd);
        };

        static constexpr inline ui32 getMaxLogn(ui32 modInd = 0) {
            return 12;
        };

        static constexpr value_type P[kMaxNbModuli] = {1152921504606830593ULL, 576460752303415297ULL};
        static constexpr value_type Pn[kMaxNbModuli] = {4194048ULL, 8387584ULL};
        static constexpr value_type PrimitiveMthRoots[kMaxNbModuli] = {413389091286905298ULL, 18874311409957647ULL};

    } __attribute__((aligned(32)));

    struct fast_three_limb_reduction_params {

        typedef ui64 value_type;
        typedef si64 signed_value_type;
        typedef ui128 greater_value_type;

        static constexpr ui32 kMaxNbModuli = 3;

        static constexpr ui32 kModulusRepresentationBitsize = 64;

        // static constexpr ui32 bitSizes[kMaxNbModuli] = {62, 61, 60};
        // static constexpr ui32 bitSizes[kMaxNbModuli] = {55, 54, 53};
        // static constexpr ui32 bitSizes[kMaxNbModuli] = {60, 59, 58};
        static constexpr ui32 bitSizes[kMaxNbModuli] = {61, 60, 59};

        static constexpr inline ui32 getModulusBitSize(ui32 modInd=0) { 
            return bitSizes[modInd];
        };

        static constexpr inline ui32 getS0(ui32 modInd=0) {
            return kModulusRepresentationBitsize - getModulusBitSize(modInd);
        };

        static constexpr inline ui32 getMaxLogn(ui32 modInd = 0) {
            return 13;
        };

        static constexpr value_type P[kMaxNbModuli] = {2305841657465536513ULL, 1152920828732768257ULL, 576460414366384129ULL};
        static constexpr value_type Pn[kMaxNbModuli] = {86511932791754ULL, 173023865583380ULL, 346047731166248ULL};
        static constexpr value_type PrimitiveMthRoots[kMaxNbModuli] = {975727216650687457ULL, 293499215298218043ULL, 338854768885041685ULL};

    } __attribute__((aligned(32)));


    struct fast_four_limb_reduction_params {

        typedef ui64 value_type;
        typedef si64 signed_value_type;
        typedef ui128 greater_value_type;

        static constexpr ui32 kMaxNbModuli = 4;

        static constexpr ui32 kModulusRepresentationBitsize = 64;

        // static constexpr ui32 bitSizes[kMaxNbModuli] = {62, 61, 60};
        // static constexpr ui32 bitSizes[kMaxNbModuli] = {55, 54, 53};
        // static constexpr ui32 bitSizes[kMaxNbModuli] = {60, 59, 58};
        static constexpr ui32 bitSizes[kMaxNbModuli] = {60, 59, 58, 57};

        static constexpr inline ui32 getModulusBitSize(ui32 modInd=0) { 
            return bitSizes[modInd];
        };

        static constexpr inline ui32 getS0(ui32 modInd=0) {
            return kModulusRepresentationBitsize - getModulusBitSize(modInd);
        };

        static constexpr inline ui32 getMaxLogn(ui32 modInd = 0) {
            return 13;
        };

        static constexpr value_type P[kMaxNbModuli] = {1152921438427545601ULL, 576460719213772801ULL, 288230359606886401ULL, 144115179803443201ULL};
        static constexpr value_type Pn[kMaxNbModuli] = {16941902124488ULL, 33883804248465ULL, 67767608494883ULL, 135535216981574ULL};
        static constexpr value_type PrimitiveMthRoots[kMaxNbModuli] = {873042808335492768ULL, 483988359960672664ULL, 128348205494580463ULL, 98297004809571271ULL};

    } __attribute__((aligned(32)));


    struct fast_31_bit_prime_three_limb_compression_params {

        typedef ui64 value_type;
        typedef si64 signed_value_type;
        typedef ui128 greater_value_type;

        static constexpr ui32 kMaxNbModuli = 3;

        static constexpr ui32 kModulusRepresentationBitsize = 64;

        static constexpr ui32 bitSizes[kMaxNbModuli] = {61, 60, 59};

        static constexpr inline ui32 getModulusBitSize(ui32 modInd=0) { 
            return bitSizes[modInd];
        };

        static constexpr inline ui32 getS0(ui32 modInd=0) {
            return kModulusRepresentationBitsize - getModulusBitSize(modInd);
        };

        static constexpr inline ui32 getMaxLogn(ui32 modInd = 0) {
            return 13;
        };

        static constexpr value_type P[kMaxNbModuli] = {2305842451332268033ULL, 1152921225666134017ULL, 576460612833067009ULL};
        static constexpr value_type Pn[kMaxNbModuli] = {35704419897232ULL, 71408839794337ULL, 142817679588162ULL};
        static constexpr value_type PrimitiveMthRoots[kMaxNbModuli] = {2070660155202212662ULL, 822026213406648290ULL, 441917728670096079ULL};

    } __attribute__((aligned(32)));



    template <typename T>
    struct params;

    template <>
    struct params<ui32> {

        typedef ui32 value_type;
        typedef si32 signed_value_type;
        typedef ui64 greater_value_type;

        static constexpr ui32 kMaxNbModuli = 56;
        static constexpr ui32 kModulusRepresentationBitsize = 32;

        static constexpr ui32 kModulusBitsize[kMaxNbModuli] = {27,28,29,30,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3};

        static constexpr inline ui32 getModulusBitSize(ui32 modInd) {
            return kModulusBitsize[modInd];
        };

        static constexpr inline ui32 getS0(ui32 modInd) {
            return kModulusRepresentationBitsize - getModulusBitSize(modInd);
        };

        static constexpr inline ui32 getMaxLogn(ui32 modInd) {
            return 18;
        };

        static constexpr ui32 P[kMaxNbModuli] = {132120577, 263454721, 536608769, 1073479681,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3};

        static constexpr ui32 Pn[kMaxNbModuli] = {2181569633U, 1299173921U, 16785347U, 4195312U,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3};

        // static constexpr ui32 PrimitiveRoots[kMaxNbModuli] = {111814339U, 252190423U, 423647926U, 795469135U};

        // static constexpr ui32 InversePrimitiveRoots[kMaxNbModuli] = {108776701ULL, 49213766ULL, 239239662ULL, 397827572ULL};
    };

    template <>
    struct params<ui64> {

        typedef ui64 value_type;
        typedef si64 signed_value_type;
        typedef ui128 greater_value_type;

        static constexpr ui32 kModulusRepresentationBitsize = 64;

        static constexpr inline ui32 getS0(ui32 modInd=0) {
            return kModulusRepresentationBitsize - getModulusBitSize(modInd);
        };

        // All primes are 1 mod (1<<19)
        static constexpr inline ui32 getMaxLogn(ui32 modInd = 0) {
            return 18;
        };

        static constexpr ui32 kMaxNbModuli = 100;

        static constexpr inline ui32 getModulusBitSize(ui32 modInd=0) { return 55; };

        static constexpr value_type P[kMaxNbModuli] = {36028797005856769ULL, 36028797001138177ULL, 36028796992749569ULL, 36028796991700993ULL, 36028796982263809ULL, 36028796971253761ULL, 36028796960243713ULL, 36028796952379393ULL, 36028796916203521ULL, 36028796914630657ULL, 36028796898377729ULL, 36028796883173377ULL, 36028796871639041ULL, 36028796868493313ULL, 36028796866920449ULL, 36028796859056129ULL, 36028796852764673ULL, 36028796850143233ULL, 36028796846473217ULL, 36028796845424641ULL, 36028796832317441ULL, 36028796826550273ULL, 36028796820258817ULL, 36028796802957313ULL, 36028796801384449ULL, 36028796800860161ULL, 36028796791422977ULL, 36028796785655809ULL, 36028796781985793ULL, 36028796775694337ULL, 36028796771500033ULL, 36028796763635713ULL, 36028796758917121ULL, 36028796719595521ULL, 36028796707012609ULL, 36028796695478273ULL, 36028796672409601ULL, 36028796670312449ULL, 36028796656156673ULL, 36028796651438081ULL, 36028796648292353ULL, 36028796637806593ULL, 36028796634136577ULL, 36028796618407937ULL, 36028796614213633ULL, 36028796607922177ULL, 36028796591669249ULL, 36028796582756353ULL, 36028796572794881ULL, 36028796570173441ULL, 36028796562309121ULL, 36028796560211969ULL, 36028796554444801ULL, 36028796544483329ULL, 36028796500443137ULL, 36028796496248833ULL, 36028796486811649ULL, 36028796484714497ULL, 36028796482093057ULL, 36028796464791553ULL, 36028796456927233ULL, 36028796434907137ULL, 36028796426518529ULL, 36028796416032769ULL, 36028796413935617ULL, 36028796412887041ULL, 36028796406071297ULL, 36028796398206977ULL, 36028796384051201ULL, 36028796382478337ULL, 36028796376711169ULL, 36028796346826753ULL, 36028796341583873ULL, 36028796332146689ULL, 36028796331098113ULL, 36028796308553729ULL, 36028796291776513ULL, 36028796268183553ULL, 36028796258222081ULL, 36028796248784897ULL, 36028796247736321ULL, 36028796243017729ULL, 36028796230434817ULL, 36028796208414721ULL, 36028796203696129ULL, 36028796195831809ULL, 36028796193734657ULL, 36028796191113217ULL, 36028796181676033ULL, 36028796180103169ULL, 36028796166995969ULL, 36028796160704513ULL, 36028796159131649ULL, 36028796151791617ULL, 36028796134490113ULL, 36028796132392961ULL, 36028796121907201ULL, 36028796121382913ULL, 36028796111945729ULL, 36028796110897153ULL};
        static constexpr value_type Pn[kMaxNbModuli] = {3435973575905ULL, 4672924158215ULL, 6871947416455ULL, 7146825323807ULL, 9620726490695ULL, 12506944520369ULL, 15393162551807ULL, 17454746861057ULL, 26938034695199ULL, 27350351557985ULL, 31610959142215ULL, 35596688821265ULL, 38620345821409ULL, 39444979549057ULL, 39857296412935ULL, 41918880732865ULL, 43568148189457ULL, 44255342963207ULL, 45217415646625ULL, 45492293556209ULL, 48928267427359ULL, 50440095931457ULL, 52089363391025ULL, 56624848907807ULL, 57037165773185ULL, 57174604728319ULL, 59648505921415ULL, 61160334428945ULL, 62122407115807ULL, 63771674579455ULL, 64871186222207ULL, 66932770553057ULL, 68169721151999ULL, 78477642822450ULL, 81776177761746ULL, 84799834791458ULL, 90847148856690ULL, 91396904681186ULL, 95107756498208ULL, 96344707104530ULL, 97169340842258ULL, 99918119969058ULL, 100880192663816ULL, 105003361357856ULL, 106102873010208ULL, 107752140489216ULL, 112012748145986ULL, 114349210411008ULL, 116960550590930ULL, 117647745375360ULL, 119709329729250ULL, 120259085557106ULL, 121770914084040ULL, 124382254268066ULL, 135927126677906ULL, 137026638337458ULL, 139500539572386ULL, 140050295402546ULL, 140737490190336ULL, 145272975792258ULL, 147334560158208ULL, 153106996387656ULL, 155306019715016ULL, 158054798875656ULL, 158604554707976ULL, 158879432624160ULL, 160666139079746ULL, 162727723452416ULL, 166438575325490ULL, 166850892200456ULL, 168362720742306ULL, 176196741376008ULL, 177571130962208ULL, 180045032218376ULL, 180319910135808ULL, 186229785364466ULL, 190627832051058ULL, 196812585211008ULL, 199423925436530ULL, 201897826704146ULL, 202172704622850ULL, 203409655257216ULL, 206708190283776ULL, 212480626585800ULL, 213717577222866ULL, 215779161618696ULL, 216328917457736ULL, 217016112256626ULL, 219490013533458ULL, 219902330413056ULL, 223338304411106ULL, 224987571931058ULL, 225399888811136ULL, 227324034251976ULL, 231859519937058ULL, 232409275777970ULL, 235158054983490ULL, 235295493943808ULL, 237769395230216ULL, 238044273151008ULL};
        static constexpr value_type PrimitiveMthRoots[kMaxNbModuli] = {22067703131386402ULL, 18222322776181002ULL, 7199356286904149ULL, 24541346616777420ULL, 9626579340559748ULL, 24220973199804622ULL, 33466574884724769ULL, 28899297006528125ULL, 26545038585224503ULL, 26430934619408969ULL, 23481578240526513ULL, 9971464351104494ULL, 32650115201499658ULL, 22855713413661521ULL, 25651756766118551ULL, 20023130744258055ULL, 9418110556368337ULL, 13548642132403352ULL, 6735002077546593ULL, 1106984024098520ULL, 26551653858347905ULL, 27973758398693868ULL, 18135985290824018ULL, 19011017735194990ULL, 17437339001858891ULL, 24040911867731055ULL, 4982536789637700ULL, 11442706221515346ULL, 4062574973840341ULL, 24401443570706153ULL, 32710706745697546ULL, 4541065579625315ULL, 22368192482192865ULL, 7591211412283900ULL, 31970553839102068ULL, 17308422257054902ULL, 22817796229598340ULL, 33677101970141443ULL, 11174697549726573ULL, 31886900614436370ULL, 29538517296660415ULL, 9310747975829776ULL, 34057954945749323ULL, 34725146788859985ULL, 12064196434971629ULL, 34819045955566713ULL, 21855065502115472ULL, 32833076243557904ULL, 10933363833582945ULL, 5417335428037482ULL, 18649376411404987ULL, 12643545369529476ULL, 34200302683109511ULL, 34729120605444594ULL, 15680808087943570ULL, 24777409172330925ULL, 14957132361705781ULL, 15657000552580822ULL, 3502629676844797ULL, 30490220314638102ULL, 35510775431288233ULL, 1718393615036444ULL, 11905812595642733ULL, 30192819252473120ULL, 17950235783799394ULL, 23692526122918901ULL, 33908909934367181ULL, 13402285379972864ULL, 2615485570512621ULL, 35189416969022809ULL, 1168377450984935ULL, 33926606775503189ULL, 35409857663129193ULL, 21599938633642480ULL, 11863399086134949ULL, 17460058762039605ULL, 11857591067645071ULL, 23431920284222154ULL, 17750885224537069ULL, 15812947602877200ULL, 27225986107965419ULL, 7371973885766658ULL, 5391148193759850ULL, 32334082989712642ULL, 29254206081901785ULL, 20592874400334415ULL, 11939271372409518ULL, 6867295872501921ULL, 33188784814743316ULL, 30335354712754568ULL, 9048603065192360ULL, 19877974899900202ULL, 3873114433368582ULL, 10101884471515956ULL, 18886826060932376ULL, 3694133947103455ULL, 17971886883266210ULL, 16842152988342925ULL, 5711086133868313ULL, 30743572280792732ULL};

    } __attribute__((aligned(32)));


}  // namespace lbcrypto ends

#endif
